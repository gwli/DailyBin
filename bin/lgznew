#!/usr/bin/env python
# -*- coding:utf-8 -*-
import os
import logging
logging.basicConfig(level=logging.DEBUG)
logger=logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
import pprint 
pp=pprint.PrettyPrinter(indent=4)

import argparse

import sys
sys.path.append("/home/devtoolsqa8/git/dailybin/lib/python")
from lgzsearch import update_status

steps = """
快速学习能力
大量泛读->提出模型->向专家请教->理解复述。 
#. 3本这个领域评价最高的书，其次通过相关推荐再选5本，最后找2本不畅销但系统性的原理上收，例如XXXX原理。
   15分中泛读,15分钟泛读。要点是：略过故事，略过案例，略过证明；标注概念，标注模型，标注公式，标注核心观点。
   5分钟看目录，提炼核心观点。  
   5分钟看自序，5分钟看目录。很多人不看自序和目录，这又是一个坏的习惯，因为作者会在自序中，梳理框架逻辑；在目录中，提炼核心观点。
   5分钟整理结论。
#. 5小时泛读
#. 花3小时建立模型
#. 化2小时，请教专家
#. 花10小时，理解复术
用个长一点的下午，或者再加上晚上的时间，高强度地把这10本书读完。建议读电子版，可以大大提高标注、回顾、记录的效率。
好好睡一觉，让知识在你的大脑中自由地碰撞、连接、融合。第二天早上，给自己最清醒的3小时，建立模型。
找一面巨大的白板墙，把标注的概念、模型、公式，写在即时贴上，贴到白板上，再用白板笔和板擦，建立、修正他们之间的关联，逐渐形成系统模型。白板，是非常重要的思考工具，我会在第四季度工具篇，专门讲“白板思考法”。
还有不清楚的问题，就要求教真正的专家了。
为什么要先建立模型，而不是先求教专家？因为如果你没有基本的全局观，问不出好问题。另外，有些专家有犀利的洞察，但也未必有全局观。他自由发挥2小时，你可能不知所云。
如果你不知道去哪里找业内专家，可以上类似于“在行”之类的平台，花些费用，带着问题虚心求教。然后，修正你的模型。
5，3，2，10。 5->3中间要间隔一天利用潜意识。
建模->通过解读剩余问题，来进行验证模型。

关于学习，有个著名的“费曼技巧”。用你的语言，把你的模型，讲给别人听。你很可能会发现，讲着讲着讲不明白了；或者你觉得讲明白了，别人就是听不懂。这些地方，就是你理解的薄弱点。
每一个行业的研究，从开始到写出大型报告和书籍，一般不超过3个月。
"""
def main(km_repo):
    
    for dir_name, subdir,filelist in os.walk(km_repo):
      for file in filelist:
       real_path = os.path.join(dir_name,file)
       if file.endswith(".py"):
           update_status(real_path)

if __name__ == "__main__":
   parser = argparse.ArgumentParser(description="lgzrecursive")
   parser.add_argument('-d',help='repo dir path ',type=str,default='.')
   args = parser.parse_args()
   
  # main(args.d)
